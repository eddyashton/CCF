trigger:
  batch: true
  branches:
    include:
      - "master"
      - "ci/*"
  paths:
    exclude:
      - 'README.md'
      - 'CCF-TECHNICAL-REPORT.pdf'
      - 'Dockerfile'
      - 'Doxyfile'
      - 'THIRD_PARTY_NOTICES.txt'
      - 'getting_started/'
      - 'sphinx/'
      - '.github/'
      - '.azure-pipelines-gh-pages.yml'
      - 'LICENSE'

pr:
  autoCancel: true
  branches:
    include:
      - master
  paths:
    include:
      - '*'
    exclude:
      - 'README.md'
      - 'CCF-TECHNICAL-REPORT.pdf'
      - 'Dockerfile'
      - 'Doxyfile'
      - 'THIRD_PARTY_NOTICES.txt'
      - 'getting_started/'
      - 'sphinx/'
      - '.github/'
      - '.azure-pipelines-gh-pages.yml'
      - 'LICENSE'

schedules:
- cron: "0 3 * * Mon-Fri"
  displayName: Daily morning build
  branches:
    include:
    - master
  always: true

jobs:
- job: Coverage
  pool: Ubuntu-1804-D8s_v3
  container:
    image: ccfciteam/ccf-ci-18.04-oe-0.6:latest
    # --publish-all enables end-to-end tests to communicate over ports
    # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
    options: --publish-all -v $(log.path):$(log.path)
  steps:
    - checkout: self
      clean: true
      submodules: true

    # Container initialization is expensive, so don't start separate container
    # for static_checks. Piggy back them here
    - script: find . -regex ".*\.sh$" | xargs shellcheck -s bash -e SC2044,SC2002,SC1091
      displayName: 'Shell Check'

    - script: python3.7 notice-check.py
      displayName: 'Check CCF copyright notices'

    - script: python3.7 notice-check.py
      workingDirectory: ePBFT
      displayName: 'Check ePBFT copyright notices'

    - script: ./check-format.sh src samples ePBFT/src
      displayName: 'Check C++ code format'


    - script: |
        python3.7 -m venv env
        source env/bin/activate
        pip install black
        black --check sphinx/ tests/ notice-check.py
      displayName: 'Check Python code format'

    # Actual coverage build steps starts here
    - template: .azure-pipelines-templates/build.yml
      parameters:
        cmake_args: '-DTARGET=virtual -DBUILD_SMALLBANK=OFF -DCOVERAGE=ON'

    - template: .azure-pipelines-templates/test.yml
      parameters:
        suite_name_suffix: 'coverage'

    - script: ../tests/coverage/generate_coverage.sh
      displayName: 'Push coverage'
      workingDirectory: build
      env:
        CODECOV_TOKEN: $(codecov.token)

- job: SAN
  pool: Ubuntu-1804-D8s_v3
  container:
    image: ccfciteam/ccf-ci-18.04-oe-0.6:latest
    # --publish-all enables end-to-end tests to communicate over ports
    # --cap-add SYS_PTRACE enables ptrace and thus LeakSanitizer
    # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
    options: --publish-all --cap-add SYS_PTRACE -v $(log.path):$(log.path)
  steps:
    - checkout: self
      clean: true
      submodules: true

    - template: .azure-pipelines-templates/build.yml
      parameters:
        cmake_args: '-DTARGET=virtual -DBUILD_SMALLBANK=OFF -DSAN=ON'

    - template: .azure-pipelines-templates/test.yml
      parameters:
        suite_name_suffix: 'san'

- job: ePBFT
  pool: Ubuntu-1804-D8s_v3
  container:
    image: ccfciteam/ccf-ci-18.04-oe-0.6:latest
    # --publish-all enables end-to-end tests to communicate over ports
    # --cap-add SYS_PTRACE enables ptrace and thus LeakSanitizer
    # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
    options: --publish-all --cap-add SYS_PTRACE -v $(log.path):$(log.path)

  steps:
    - checkout: self
      clean: true
      submodules: true

    - script: mkdir build
      displayName: 'Make a build directory'

    - script: cmake -DTARGET=virtual -GNinja -DPBFT=ON -DBUILD_SMALLBANK=OFF ..
      displayName: cmake
      workingDirectory: build

    - script: ninja
      displayName: Ninja
      workingDirectory: build

    - script: |
        ./tests.sh -VV --timeout 240 --no-compress-output -T Test
      displayName: CTest
      workingDirectory: build
    - script: 'xsltproc --stringparam suiteName "$(Agent.MachineName) SGX" ../tests/infra/ctest_to_junit.xslt Testing/*/Test.xml > JUnit.xml'
      displayName: XSLT
      workingDirectory: build
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/JUnit.xml'
        publishRunAttachments: true
      condition: succeededOrFailed()